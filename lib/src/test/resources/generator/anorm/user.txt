import anorm._

package test.apidoc.apidoctest.v0.anorm.parsers {

  object Name {

    case class Mappings(
      first: String = "first"
      last: String = "last"
    )

    object Mappings {

      def table(table: String) = prefix(Some(s"$table."))

      def prefix(prefix: Option[String]) = Mappings(
        first = s"${prefix.getOrElse("")}first",
        last = s"${prefix.getOrElse("")}last"
      )

    }

    def table(table: String) = parser(Mappings.prefix(table))

    def parser(mappings: Mappings): RowParser[test.apidoc.apidoctest.v0.models.Name] = {
      SqlParser.str(mappings.first).? ~
      SqlParser.str(mappings.last).? map {
        case first ~ last => {
          test.apidoc.apidoctest.v0.models.Name(
            first = first,
            last = last
          )
        }
      }
    }

  }

  object User {

    case class Mappings(
      guid: String = "guid"
      email: String = "email"
      name: test.apidoc.apidoctest.v0.anorm.parsers.Name.Mappings = test.apidoc.apidoctest.v0.anorm.parsers.Name.Mappings.prefix("name_")
    )

    object Mappings {

      def table(table: String) = prefix(Some(s"$table."))

      def prefix(prefix: Option[String]) = Mappings(
        guid = s"${prefix.getOrElse("")}guid",
        email = s"${prefix.getOrElse("")}email",
        name = TODO(s"${prefix.getOrElse("")}name")
      )

    }

    def table(table: String) = parser(Mappings.prefix(table))

    def parser(mappings: Mappings): RowParser[test.apidoc.apidoctest.v0.models.User] = {
      SqlParser.get[_root_.java.util.UUID](mappings.guid) ~
      SqlParser.str(mappings.email) ~
      test.apidoc.apidoctest.v0.anorm.parsers.Name.Parsers.parser(mappings.name).? map {
        case guid ~ email ~ name => {
          test.apidoc.apidoctest.v0.models.User(
            guid = guid,
            email = email,
            name = name
          )
        }
      }
    }

  }

}