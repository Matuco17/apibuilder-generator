import anorm._

package test.apidoc.apidoctest.v0.anorm {

  package parsers {

    object Name {

      def newParser(config: me.apidoc.lib.anorm.parsers.util.Config) = {
        config match {
          case me.apidoc.lib.anorm.parsers.util.Config.Prefix(prefix) => parser(
            first = s"${prefix}_first",
            last = s"${prefix}_last"
          )
        }
      }

      def parserByTable(table: String) = parser(
        first = s"$table.first",
        last = s"$table.last"
      )

      def parser(
        first: String,
        last: String
      ): RowParser[test.apidoc.apidoctest.v0.models.Name] = {
        SqlParser.str(first).? ~
        SqlParser.str(last).? map {
          case first ~ last => {
            test.apidoc.apidoctest.v0.models.Name(
              first = first,
              last = last
            )
          }
        }
      }

    }

    object User {

      def newParser(config: me.apidoc.lib.anorm.parsers.util.Config) = {
        config match {
          case me.apidoc.lib.anorm.parsers.util.Config.Prefix(prefix) => parser(
            guid = s"${prefix}_guid",
            email = s"${prefix}_email",
            name = me.apidoc.lib.anorm.parsers.util.Config.Prefix(s"${prefix}_name")
          )
        }
      }

      def parserByTable(table: String) = parser(
        guid = s"$table.guid",
        email = s"$table.email",
        name = me.apidoc.lib.anorm.parsers.util.Config.Prefix(s"${table}_name")
      )

      def parser(
        guid: String,
        email: String,
        name: me.apidoc.lib.anorm.parsers.util.Config
      ): RowParser[test.apidoc.apidoctest.v0.models.User] = {
        SqlParser.get[_root_.java.util.UUID](guid) ~
        SqlParser.str(email) ~
        test.apidoc.apidoctest.v0.anorm.parsers.Name.newParser(name).? map {
          case guid ~ email ~ name => {
            test.apidoc.apidoctest.v0.models.User(
              guid = guid,
              email = email,
              name = name
            )
          }
        }
      }

    }

  }

}