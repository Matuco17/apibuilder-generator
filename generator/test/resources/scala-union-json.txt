implicit def jsonReadsApiDocTestUser: play.api.libs.json.Reads[User] = {
  (
    (__ \ "registered_user").read[RegisteredUser].asInstanceOf[play.api.libs.json.Reads[User]]
    orElse
    (__ \ "guest_user").read[GuestUser].asInstanceOf[play.api.libs.json.Reads[User]]
  )
}

implicit def jsonWritesApiDocTestUser: play.api.libs.json.Writes[User] = new play.api.libs.json.Writes[User] {
  def writes(obj: User): play.api.libs.json.JsObject = {
    obj match {
      case x: RegisteredUser => {
        play.api.libs.json.Json.obj(
          "registered_user" -> play.api.libs.json.Json.obj(
            "guid" -> x.guid,
            "email" -> x.email
          )
        )
      }
      case x: GuestUser => {
        play.api.libs.json.Json.obj(
          "guest_user" -> play.api.libs.json.Json.obj(
            "guid" -> x.guid,
            "email" -> x.email
          )
        )
      }
    }
  }
}
